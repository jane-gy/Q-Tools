includeFile('SummaryTables.QScript');
includeFile('Reverse.QScript');

/* ----------------------------------------------------- */

/* Get all pick one questions */
var questions = readQs(getQs(project.dataFiles[0]));
/* Mark questions as scale */
var scaleQs = chooseQs(questions, "Please choose scale questions");
questions.map(i => {
    if (scaleQs.includes(i)) i.scale = true;
});
/* Mark questions that are reversed */
var reversedQs = chooseQs(scaleQs, "Please choose which scale questions should be reversed");
for (var i = 0; i < reversedQs.length; i++) {
    var qs = reversedQs[i].question;
    qs.map(indv => {
        if (reversedQs[i].scale) reverseScale(indv);
    });
    reversedQs[i].reversed = true;
}


/* Choose summary tables */
var loopTables = questions.map(i => {
    if (i.partOfLoop) return i;
}).filter(Boolean);
var sumTables = chooseQs(loopTables, "Please choose questions to create summary tables for");

var basicScale = sumTables.map(i => {
    if (i.scale) return i;
}).filter(Boolean);

var numericSums = sumTables.map(i => {
    if (detectNumeric(i)) return i;
}).filter(Boolean)

const objsToDeleteSet1 = new Set(basicScale);
const objsToDeleteSet2 = new Set(numericSums);
var basicNonScale = sumTables.filter(obj => {
    return !objsToDeleteSet1.has(obj);
});
basicNonScale = basicNonScale.filter(obj => {
    return !objsToDeleteSet2.has(obj);
});


var dataFile = project.dataFiles[0];

/* Create Summary Tables */
for (var i = 0; i < basicScale.length; i++) {
    createSumTable(dataFile, basicScale[i], false, true, false, false, null);
}
for (var i = 0; i < numericSums.length; i++) {
    createSumTable(dataFile, numericSums[i], false, false, true, false, null);
}
for (var i = 0; i < basicNonScale.length; i++) {
    createSumTable(dataFile, basicNonScale[i], true, false, false, false, null);
}



// /* Add T2B/B2B nets */
questions.map(i => {
    if (i.scale) {
        log("NET: " + i.questionName);
        addScaleNets(i);
        log("-----");
    }
})